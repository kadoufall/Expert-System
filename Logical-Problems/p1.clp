(defmodule MAIN   (export deftemplate status)  (export defglobal initial-policeman initial-criminal initial-father initial-mother initial-daughter initial-son)); The status facts hold the state information of the search tree.(deftemplate MAIN::status    (slot search-depth (type INTEGER) (range 1 ?VARIABLE))   (slot parent (type FACT-ADDRESS SYMBOL) (allowed-symbols no-parent))   (slot shore-1-policeman (type INTEGER) (range 0 ?VARIABLE))   (slot shore-1-criminal (type INTEGER) (range 0 ?VARIABLE))   (slot shore-1-father (type INTEGER) (range 0 ?VARIABLE))   (slot shore-1-mother (type INTEGER) (range 0 ?VARIABLE))   (slot shore-1-daughter (type INTEGER) (range 0 ?VARIABLE))   (slot shore-1-son (type INTEGER) (range 0 ?VARIABLE))   (slot shore-2-policeman (type INTEGER) (range 0 ?VARIABLE))   (slot shore-2-criminal (type INTEGER) (range 0 ?VARIABLE))   (slot shore-2-father (type INTEGER) (range 0 ?VARIABLE))   (slot shore-2-mother (type INTEGER) (range 0 ?VARIABLE))   (slot shore-2-daughter (type INTEGER) (range 0 ?VARIABLE))   (slot shore-2-son (type INTEGER) (range 0 ?VARIABLE))   (slot boat-location (type SYMBOL) (allowed-values shore-1 shore-2))   (slot last-move (type STRING))); Initial state(defglobal MAIN ?*initial-policeman* = 1                ?*initial-criminal* = 1                ?*initial-father* = 1                ?*initial-mother* = 1                ?*initial-daughter* = 2                ?*initial-son* = 2)(deffacts MAIN::initial-positions  (status (search-depth 1)           (parent no-parent)          (shore-1-policeman ?*initial-policeman*)          (shore-2-policeman 0)          (shore-1-criminal ?*initial-criminal*)          (shore-2-criminal 0)          (shore-1-father ?*initial-father*)          (shore-2-father 0)          (shore-1-mother ?*initial-mother*)          (shore-2-mother 0)          (shore-1-daughter ?*initial-daughter*)          (shore-2-daughter 0)          (shore-1-son ?*initial-son*)          (shore-2-son 0)          (boat-location shore-1)          (last-move "No move.")))(deffacts MAIN::boat-information  (boat-can-hold 2)); functions for printing different conditions(deffunction MAIN::policeman (?shore)     (format nil "Move policeman to %s.%n" ?shore))(deffunction MAIN::father (?shore)     (format nil "Move father to %s.%n" ?shore))(deffunction MAIN::mother (?shore)     (format nil "Move mother to %s.%n" ?shore))(deffunction MAIN::policeman_criminal (?shore)     (format nil "Move policeman and criminal to %s.%n" ?shore))(deffunction MAIN::policeman_father (?shore)     (format nil "Move policeman and father to %s.%n" ?shore))(deffunction MAIN::policeman_mother (?shore)     (format nil "Move policeman and mother to %s.%n" ?shore))(deffunction MAIN::policeman_daughter (?shore)     (format nil "Move policeman and daughter to %s.%n" ?shore))(deffunction MAIN::policeman_son (?shore)     (format nil "Move policeman and son to %s.%n" ?shore))(deffunction MAIN::father_son (?shore)     (format nil "Move father and son to %s.%n" ?shore))(deffunction MAIN::father_mother (?shore)     (format nil "Move father and mother to %s.%n" ?shore))(deffunction MAIN::mother_daughter (?shore)     (format nil "Move mother and daughter to %s.%n" ?shore)); rules (defrule MAIN::shore-1-move   ?node <- (status (search-depth ?num)                    (boat-location shore-1)                   (shore-1-policeman ?s1p)                   (shore-2-policeman ?s2p)                   (shore-1-criminal ?s1c)                   (shore-2-criminal ?s2c)                   (shore-1-father ?s1f)                   (shore-2-father ?s2f)                   (shore-1-mother ?s1m)                   (shore-2-mother ?s2m)                   (shore-1-daughter ?s1d)                   (shore-2-daughter ?s2d)                   (shore-1-son ?s1s)                   (shore-2-son ?s2s))  (boat-can-hold ?limit)  =>  ; policeman_criminal  (if (and (eq ?s1p 1) (eq ?s1c 1))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 0)                             (shore-2-policeman 1)                             (shore-1-criminal 0)                             (shore-2-criminal 1)                             (boat-location shore-2)                             (last-move (policeman_criminal shore-2))))  ; policeman_father  (if (and (eq ?s1p 1) (eq ?s1f 1))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 0)                             (shore-2-policeman 1)                             (shore-1-father 0)                             (shore-2-father 1)                             (boat-location shore-2)                             (last-move (policeman_father shore-2))))  ; policeman_mother  (if (and (eq ?s1p 1) (eq ?s1m 1))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 0)                             (shore-2-policeman 1)                             (shore-1-mother 0)                             (shore-2-mother 1)                             (boat-location shore-2)                             (last-move (policeman_mother shore-2))))  ; policeman_daughter  (if (and (eq ?s1p 1) (<> ?s1d 0))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 0)                             (shore-2-policeman 1)                             (shore-1-daughter (- ?s1d 1))                             (shore-2-daughter (+ ?s2d 1))                             (boat-location shore-2)                             (last-move (policeman_daughter shore-2))))  ; policeman_son  (if (and (eq ?s1p 1) (<> ?s1s 0))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 0)                             (shore-2-policeman 1)                             (shore-1-son (- ?s1s 1))                             (shore-2-son (+ ?s2s 1))                             (boat-location shore-2)                             (last-move (policeman_son shore-2)))) ; policeman  (if (eq ?s1p 1)      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 0)                             (shore-2-policeman 1)                             (boat-location shore-2)                             (last-move (policeman shore-2))))  ; father  (if (eq ?s1f 1)      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-father 0)                             (shore-2-father 1)                             (boat-location shore-2)                             (last-move (father shore-2))))    ; mother  (if (eq ?s1m 1)      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-mother 0)                             (shore-2-mother 1)                             (boat-location shore-2)                             (last-move (mother shore-2))))    ; father_mother  (if (and (eq ?s1f 1) (eq ?s1m 1))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-father 0)                             (shore-2-father 1)                             (shore-1-mother 0)                             (shore-2-mother 1)                             (boat-location shore-2)                             (last-move (father_mother shore-2))))  ; father_son  (if (and (eq ?s1f 1) (<> ?s1s 0))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-father 0)                             (shore-2-father 1)                             (shore-1-son (- ?s1s 1))                             (shore-2-son (+ ?s2s 1))                             (boat-location shore-2)                             (last-move (father_son shore-2))))  ; mother_daughter  (if (and (eq ?s1m 1) (<> ?s1d 0))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-mother 0)                             (shore-2-mother 1)                             (shore-1-daughter (- ?s1d 1))                             (shore-2-daughter (+ ?s2d 1))                             (boat-location shore-2)                             (last-move (mother_daughter shore-2)))))(defrule MAIN::shore-2-move   ?node <- (status (search-depth ?num)                    (boat-location shore-2)                   (shore-1-policeman ?s1p)                   (shore-2-policeman ?s2p)                   (shore-1-criminal ?s1c)                   (shore-2-criminal ?s2c)                   (shore-1-father ?s1f)                   (shore-2-father ?s2f)                   (shore-1-mother ?s1m)                   (shore-2-mother ?s2m)                   (shore-1-daughter ?s1d)                   (shore-2-daughter ?s2d)                   (shore-1-son ?s1s)                   (shore-2-son ?s2s))  (boat-can-hold ?limit)  =>  ; policeman_criminal  (if (and (eq ?s2p 1) (eq ?s2c 1))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 1)                             (shore-2-policeman 0)                             (shore-1-criminal 1)                             (shore-2-criminal 0)                             (boat-location shore-1)                             (last-move (policeman_criminal shore-1))))  ; policeman_father  (if (and (eq ?s2p 1) (eq ?s2f 1))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 1)                             (shore-2-policeman 0)                             (shore-1-father 1)                             (shore-2-father 0)                             (boat-location shore-1)                             (last-move (policeman_father shore-1))))  ; policeman_mother  (if (and (eq ?s2p 1) (eq ?s2m 1))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 1)                             (shore-2-policeman 0)                             (shore-1-mother 1)                             (shore-2-mother 0)                             (boat-location shore-1)                             (last-move (policeman_mother shore-1))))  ; policeman_daughter  (if (and (eq ?s2p 1) (<> ?s2d 0))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 1)                             (shore-2-policeman 0)                             (shore-1-daughter (+ ?s1d 1))                             (shore-2-daughter (- ?s2d 1))                             (boat-location shore-1)                             (last-move (policeman_daughter shore-1))))  ; policeman_son  (if (and (eq ?s2p 1) (<> ?s2s 0))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 1)                             (shore-2-policeman 0)                             (shore-1-son (+ ?s1s 1))                             (shore-2-son (- ?s2s 1))                             (boat-location shore-1)                             (last-move (policeman_son shore-1)))) ; policeman  (if (eq ?s2p 1)      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-policeman 1)                             (shore-2-policeman 0)                             (boat-location shore-1)                             (last-move (policeman shore-1))))  ; father  (if (eq ?s2f 1)      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-father 1)                             (shore-2-father 0)                             (boat-location shore-1)                             (last-move (father shore-1))))    ; mother  (if (eq ?s2m 1)      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-mother 1)                             (shore-2-mother 0)                             (boat-location shore-1)                             (last-move (mother shore-1))))    ; father_mother  (if (and (eq ?s2f 1) (eq ?s2m 1))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-father 1)                             (shore-2-father 0)                             (shore-1-mother 1)                             (shore-2-mother 0)                             (boat-location shore-1)                             (last-move (father_mother shore-1))))  ; father_son  (if (and (eq ?s2f 1) (<> ?s2s 0))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-father 1)                             (shore-2-father 0)                             (shore-1-son (+ ?s1s 1))                             (shore-2-son (- ?s2s 1))                             (boat-location shore-1)                             (last-move (father_son shore-1))))  ; mother_daughter  (if (and (eq ?s2m 1) (<> ?s2d 0))      then (duplicate ?node (search-depth =(+ 1 ?num))                             (parent ?node)                             (shore-1-mother 1)                             (shore-2-mother 0)                             (shore-1-daughter (+ ?s1d 1))                             (shore-2-daughter (- ?s2d 1))                             (boat-location shore-1)                             (last-move (mother_daughter shore-1))))); Constraints(defmodule CONSTRAINTS   (import MAIN deftemplate status))(defrule CONSTRAINTS::criminal-harm-family   (declare (auto-focus TRUE))  ?node <- (status (shore-1-policeman ?s1p)                   (shore-2-policeman ?s2p)                   (shore-1-criminal ?s1c)                   (shore-2-criminal ?s2c)                   (shore-1-father ?s1f)                   (shore-2-father ?s2f)                   (shore-1-mother ?s1m)                   (shore-2-mother ?s2m)                   (shore-1-daughter ?s1d)                   (shore-2-daughter ?s2d)                   (shore-1-son ?s1s)                   (shore-2-son ?s2s))  (test (or (and (eq ?s2c 1) (eq ?s2p 0) (or (<> ?s2f 0) (<> ?s2m 0) (<> ?s2d 0) (<> ?s2s 0)))            (and (eq ?s1c 1) (eq ?s1p 0) (or (<> ?s1f 0) (<> ?s1m 0) (<> ?s1d 0) (<> ?s1s 0)))))  =>  (retract ?node))(defrule CONSTRAINTS::father-scold-daughter   (declare (auto-focus TRUE))  ?node <- (status (shore-1-father ?s1f)                   (shore-2-father ?s2f)                   (shore-1-mother ?s1m)                   (shore-2-mother ?s2m)                   (shore-1-daughter ?s1d)                   (shore-2-daughter ?s2d))  (test (or (and (eq ?s2f 1) (eq ?s2m 0) (<> ?s2d 0))            (and (eq ?s1f 1) (eq ?s1m 0) (<> ?s1d 0))))  =>  (retract ?node))(defrule CONSTRAINTS::mother-scold-son   (declare (auto-focus TRUE))  ?node <- (status (shore-1-father ?s1f)                   (shore-2-father ?s2f)                   (shore-1-mother ?s1m)                   (shore-2-mother ?s2m)                   (shore-1-son ?s1s)                   (shore-2-son ?s2s))  (test (or (and (eq ?s2f 0) (eq ?s2m 1) (<> ?s2s 0))            (and (eq ?s1f 0) (eq ?s1m 1) (<> ?s1s 0))))  =>  (retract ?node))(defrule CONSTRAINTS::circular-path   (declare (auto-focus TRUE))  (status (search-depth ?sd1)          (boat-location ?bl)           (shore-1-policeman ?s1p)                   (shore-2-policeman ?s2p)                   (shore-1-criminal ?s1c)                   (shore-2-criminal ?s2c)                   (shore-1-father ?s1f)                   (shore-2-father ?s2f)                   (shore-1-mother ?s1m)                   (shore-2-mother ?s2m)                   (shore-1-daughter ?s1d)                   (shore-2-daughter ?s2d)                   (shore-1-son ?s1s)                   (shore-2-son ?s2s))  ?node <- (status (search-depth ?sd2&:(< ?sd1 ?sd2))                   (boat-location ?bl)                    (shore-1-policeman ?s1p)                   (shore-2-policeman ?s2p)                   (shore-1-criminal ?s1c)                   (shore-2-criminal ?s2c)                   (shore-1-father ?s1f)                   (shore-2-father ?s2f)                   (shore-1-mother ?s1m)                   (shore-2-mother ?s2m)                   (shore-1-daughter ?s1d)                   (shore-2-daughter ?s2d)                   (shore-1-son ?s1s)                   (shore-2-son ?s2s))  =>  (retract ?node)); Solution(defmodule SOLUTION   (import MAIN deftemplate status)  (import MAIN defglobal initial-policeman initial-criminal initial-father initial-mother initial-daughter initial-son))       (deftemplate SOLUTION::moves    (slot id (type FACT-ADDRESS SYMBOL) (allowed-symbols no-parent))    (multislot moves-list  (type STRING)))(defrule SOLUTION::final  (declare (auto-focus TRUE))  ?node <- (status (parent ?parent)                   (shore-2-criminal ?c&:(= ?c ?*initial-criminal*))                   (shore-2-policeman ?p&:(= ?p ?*initial-policeman*))                   (shore-2-father ?f&:(= ?f ?*initial-father*))                   (shore-2-mother ?m&:(= ?m ?*initial-mother*))                   (shore-2-daughter ?d&:(= ?d ?*initial-daughter*))                   (shore-2-son ?s&:(= ?s ?*initial-son*))                   (last-move ?move))  =>  (retract ?node)  (assert (moves (id ?parent) (moves-list ?move))))(defrule SOLUTION::add-before   ?node <- (status (parent ?parent)                   (last-move ?move))  ?mv <- (moves (id ?node) (moves-list $?rest))  =>  (modify ?mv (id ?parent) (moves-list ?move ?rest)))(defrule SOLUTION::print-solution   ?mv <- (moves (id no-parent) (moves-list "No move." $?m))  =>  (retract ?mv)  (printout t  "Solution found: " crlf)  (progn$ (?move ?m) (printout t ?move))  (printout t crlf))